#!/bin/bash
# prototype backend interpreter for the PDC CPET receptacle
# Khang 10/2021 (version 3) Made on 10/20/21
PROG=`basename $0`
USAGE="Usage:  $PROG
	jobtype
	jobname number_of_worker (mpi-only) slots_per_worker (mpi-only)  [count filename [build-command ...]]
	[exec-command...]
	[code]
where the characters beginning with jobname represent standard input.
    jobname  names the job being acted on
    count, filename  are length of code and filename to store  code  into
	If count is 0 or empty then ignore (dummy) filename and assume no code 
    build-command  is a shell command to compile or otherwise prepare filename
    exec-command  is shell command for executing the job (blank line = no exec)
    code  is the contents for filename, consisting of count bytes"

read JOBTYPE
test -z "$JOBTYPE" && { echo "$USAGE" ; exit 1 ; }
if [ $JOBTYPE = "omp" ];
then
	echo "Openmp Jobs Received"
	read JOBNAME COUNT FILENAME BUILD
	test -z "$JOBNAME" && { echo "$USAGE" ; exit 1 ; }
	read EXEC

	test -d $JOBNAME || mkdir -p $JOBNAME || {
    	echo "$PROG: could not create subdirectory $JOBNAME, aborting"
    	exit 1
	}
	cd $JOBNAME || { 
    	echo "$PROG: could not change to subdirectory $JOBNAME, aborting"
    	exit 1
	}


	case "$COUNT" in 
    	""|0) ;;
    	[1-9]*) echo "$COUNT" | grep -q '^[0-9]*$' || {
	        	echo "$PROG $JOBNAME: count must be an unsigned integer"
			echo "$USAGE" 
			exit 1; }
	    	test -z "$FILENAME" && {
			echo "$PROG $JOBNAME: missing filename"
			echo "$USAGE" 
			exit 1; }
	    	dd bs=1 count=$COUNT of="$FILENAME" || {
			echo "$PROG $JOBNAME: couldn't read $COUNT bytes of $FILENAME"
			echo "$USAGE" 
			exit 1; } ;;
    	*) echo "count='$COUNT' filename='$FILENAME'" ; echo "$USAGE" ; exit 1;;
	esac
# any code is consumed from stdin and stored in filename

	if test -n "$BUILD"
	then 
    	eval $BUILD || {
		echo "$PROG: attempt to build failed: $BUILD"
		echo "Contents of subdirectory $JOBNAME:"
		ls -l
		exit 1
    	}
	fi

	if test -n "$EXEC"
	then
		CURRENT_REPLICAS=$(kubectl get rc openmp -n default -o=jsonpath='{.status.replicas}')
		CURRENT_PLUS=$(($CURRENT_REPLICAS+1))
		CURRENT_MINUS=$(($CURRENT_REPLICAS-1))
		kubectl scale --replicas=$CURRENT_PLUS rc openmp || {
			echo "failed to increment the replica count of replication controller named openmp, attempting to execute locally"
			exec $EXEC > ../$JOBNAME.out
			# if we reach this line, then exec failed
			echo "$PROG: execution attempt failed:  $EXEC"
    		echo "Contents of subdirectory $JOBNAME:"
    		ls -l
    		exit 1
		}
		kubectl wait --for=condition=ready pod -l app=stest,inuse=nah --timeout=30s || {
			echo "pod failed to be ready; attempting to execute locally"
			CURRENT_REPLICAS=$(kubectl get rc openmp -n default -o=jsonpath='{.status.replicas}')
			CURRENT_PLUS=$(($CURRENT_REPLICAS+1))
			CURRENT_MINUS=$(($CURRENT_REPLICAS-1))
			kubectl scale --replicas=$CURRENT_MINUS rc openmp
			exec $EXEC > ../$JOBNAME.out
			# if we reach this line, then exec failed
			echo "$PROG: execution attempt failed:  $EXEC"
    		echo "Contents of subdirectory $JOBNAME:"
    		ls -l
    		exit 1
		}
		PODNAME=$(kubectl  get pod -l app=stest,inuse=nah -o name)
		POD=$(echo $PODNAME  | head -n1 | cut -d " " -f1)
		POD="${POD:4}"
		kubectl label pod $POD inuse=yah --overwrite
		cd ..
    	kubectl cp $JOBNAME $POD:/ || {
		echo "copying into pod failed; attempting to execute locally"
		CURRENT_REPLICAS=$(kubectl get rc openmp -n default -o=jsonpath='{.status.replicas}')
		CURRENT_PLUS=$(($CURRENT_REPLICAS+1))
		CURRENT_MINUS=$(($CURRENT_REPLICAS-1))
		kubectl scale --replicas=$CURRENT_MINUS rc openmp
		exec $EXEC > $JOBNAME.out
		# if we reach this line, then exec failed
		echo "$PROG: execution attempt failed:  $EXEC"
    	echo "Contents of subdirectory $JOBNAME:"
    	ls -l
    	exit 1
	}
    	kubectl exec -i $POD -- bash -c "exec /$JOBNAME/$EXEC" > $JOBNAME.out || {
    		echo "$PROG: execution attempt failed:  $EXEC"
    		echo "Contents of subdirectory $JOBNAME within pod $POD:"
    		kubectl exec -i $POD -- bash -c " ls -l /$JOBNAME"
		CURRENT_REPLICAS=$(kubectl get rc openmp -n default -o=jsonpath='{.status.replicas}')
		CURRENT_PLUS=$(($CURRENT_REPLICAS+1))
		CURRENT_MINUS=$(($CURRENT_REPLICAS-1))
		kubectl scale --replicas=$CURRENT_MINUS rc openmp
    	exit 1
	}
	CURRENT_REPLICAS=$(kubectl get rc openmp -n default -o=jsonpath='{.status.replicas}')
	CURRENT_PLUS=$(($CURRENT_REPLICAS+1))
	CURRENT_MINUS=$(($CURRENT_REPLICAS-1))
	kubectl scale --replicas=$CURRENT_MINUS rc openmp
	fi
elif [ $JOBTYPE = "mpi" ];
then 
	echo "MPI Job Received"
	read JOBNAME NUMBEROFWORKER SLOTSPERWORKER COUNT FILENAME BUILD
	test -z "$JOBNAME" && { echo "$USAGE" ; exit 1 ; }
	read EXEC

	test -d ~/pv-test/$JOBNAME || mkdir -p ~/pv-test/$JOBNAME || {
    		echo "$PROG: could not create subdirectory $JOBNAME, aborting"
    		exit 1
	}

#cp test-mpi-job.yaml ~/pv-test/$JOBNAME/$JOBNAME-job.yaml
	ls ~/pv-test/$JOBENAME/

	cd ~/pv-test/$JOBNAME || {
    	echo "$PROG: could not change to subdirectory $JOBNAME, aborting"
    	exit 1
	}


	cp ~/runestone-backend/cpet/src/backends/test-mpi-job.yaml ~/pv-test/"$JOBNAME"/"$JOBNAME-job.yaml"
	#ls ~/pv-test/$JOBENAME/
	case "$COUNT" in
    		""|0) ;;
    		[1-9]*) echo "$COUNT" | grep -q '^[0-9]*$' || {
                	echo "$PROG $JOBNAME: count must be an unsigned integer"
                	echo "$USAGE"
                	exit 1; }
            	test -z "$FILENAME" && {
                	echo "$PROG $JOBNAME: missing filename"
                	echo "$USAGE"
                	exit 1; }
            	dd bs=1 count=$COUNT of="$FILENAME" || {
                	echo "$PROG $JOBNAME: couldn't read $COUNT bytes of $FILENAME"
                	echo "$USAGE"
                	exit 1; } ;;
    	*) echo "count='$COUNT' filename='$FILENAME'" ; echo "$USAGE" ; exit 1;;
	esac

	function find_and_replace_in_file(){
 	#find_and_replace_in_file <original_word> <new_word> <file_name>
  	# sed -i -e 's/'"$1"'/'"$2"'/g' $3
  		file_name=$3
  	# escape backslash
  		original_word=$(echo "$1" | sed 's/\//\\\//g')
  		new_word=$(echo "$2" | sed 's/\//\\\//g')
  		sed -i 's/'"$original_word"'/'"$new_word"'/g' $file_name
	}

	file="$JOBNAME-job.yaml"
	#echo $file
	find_and_replace_in_file "{{ jobname }}" "$JOBNAME" $file
	find_and_replace_in_file "{{ build }}" "$BUILD" $file
	find_and_replace_in_file "{{ exec }}" "$EXEC" $file
	find_and_replace_in_file "{{ numberOfWorker }}" "$NUMBEROFWORKER" $file
	find_and_replace_in_file "{{ slotsPerWorker }}" "$SLOTSPERWORKER" $file
	#pwd
	kubectl apply -f "$JOBNAME-job.yaml"
	sleep 1
	PODNAME=$(kubectl get pods -l mpi_job_name="$JOBNAME",mpi_role_type=launcher -o name)
#echo $POD
	echo $PODNAME
#kubectl wait --for=condition=status mpijob.kubeflow.org/jobname --timeout=10s || {
#       echo "Pod stuck"
#       kubectl delete mpijob.kubeflow.org/jobname
#       exit 1
#}
#timeout="$()"

#touch ~/runestone/cpet/src/backends/$JOBNAME.out

#podToFound=$(kubectl get pods | grep jobname-launcher)
#found='Completed'
	let count=0
	while [ $count -le 60 ]
	do
        	sleep 1
        	kubectl logs -f ${PODNAME} 1> ~/runestone-backend/cpet/src/backends/$JOBNAME.out 2> /dev/null
        	if [ -s ~/runestone-backend/cpet/src/backends/$JOBNAME.out ];
        	then
#               	let count++
#               	echo $count
#               	continue
                	break
        	else
                	let count++
#                	echo $count
#               	echo "It took approximately $count seconds to complete the job"
                	continue
        	#       break
        	fi	
	done
	count=$(($count+$count/2))
	echo "It took approximately $count seconds to complete the job"
	#kubectl logs -f ${PODNAME} 1> ~/runestone-backend/cpet/src/backends/$JOBNAME.out
	kubectl delete  mpijob.kubeflow.org/"$JOBNAME"
	rm -rf ~/pv-test/$JOBNAME 
elif [ $JOBTYPE = "sta" ]; 
then 
echo "Standalone Jobs Received"
	read JOBNAME COUNT FILENAME BUILD 
test -z "$JOBNAME" && { echo 
"$USAGE" ; exit 1 ; } 
read EXEC 
test -d $JOBNAME || mkdir -p $JOBNAME || 
{
    echo "$PROG: could not create subdirectory $JOBNAME, aborting"
    exit 1
}
cd $JOBNAME || {
    echo "$PROG: could not change to subdirectory $JOBNAME, aborting"
    exit 1
}
case "$COUNT" in
    ""|0) ;;
    [1-9]*) echo "$COUNT" | grep -q '^[0-9]*$' || {
	        echo "$PROG $JOBNAME: count must be an unsigned integer"
		echo "$USAGE"
		exit 1; }
	    test -z "$FILENAME" && {
		echo "$PROG $JOBNAME: missing filename"
		echo "$USAGE"
		exit 1; }
	    dd bs=1 count=$COUNT of="$FILENAME" || {
		echo "$PROG $JOBNAME: couldn't read $COUNT bytes of $FILENAME"
		echo "$USAGE"
		exit 1; } ;;
    *) echo "count='$COUNT' filename='$FILENAME'" ; echo "$USAGE" ; exit 
1;; 
esac
# any code is consumed from stdin and stored in filename
if test -n "$BUILD" 
then
    eval $BUILD || {
	echo "$PROG: attempt to build failed: $BUILD"
	echo "Contents of subdirectory $JOBNAME:"
	ls -l
	exit 1
    }
fi 
if test -n "$EXEC"
then
    exec $EXEC
    # if we reach this line, then exec failed
    echo "$PROG: execution attempt failed: $EXEC"
    echo "Contents of subdirectory $JOBNAME:"
    ls -l
    exit 1 
fi 
else
	echo "File type not found"
fi
exit 0
